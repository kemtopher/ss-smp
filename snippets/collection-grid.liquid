{% comment %}
Snippet Arguments
- collection: Liquid 'collection' or 'search' object
- items: Paginated 'collection.products' or 'search.results' list. Cannot be pulled from the the 'collection' object passed in above
- enable_sidebar: boolean
- filter_style: 'sidebar' or 'drawer'
- enable_sort: boolean
- enable_collection_count
- per_row
- mobile_flush_grid
- quick_shop_enable
{% endcomment %}

{% liquid
  if collection.products
    assign count = collection.products_count
    assign count_label = 'collections.general.items_with_count'
  endif

  if collection.results
    assign count = collection.results_count
    assign count_label = 'general.search.result_count'
  endif

  assign filters = collection.filters
  assign sort_by = collection.sort_by
  assign default_sort_by = collection.default_sort_by
  assign sort_options = collection.sort_options
  assign current_filter_size = 0

  for filter in filters
    assign current_filter_size = current_filter_size | plus: filter.active_values.size
  endfor
%}

<div class="collection-grid__wrapper">
  <div class="collection-filter">
    <div class="collection-filter__item collection-filter__item--drawer">
      <button
        type="button"
        class="js-drawer-open-collection-filters btn btn--tertiary{% unless current_filter_size == 0 %} btn--tertiary-active{% endunless %}"
        aria-controls="FilterDrawer">
          <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-filter" viewBox="0 0 64 64"><title>icon-filter</title><path d="M48 42h10m-10 0a5 5 0 1 1-5-5 5 5 0 0 1 5 5ZM7 42h31M16 22H6m10 0a5 5 0 1 1 5 5 5 5 0 0 1-5-5Zm41 0H26"/></svg>
          {{ 'collections.filters.title_tags' | t }}
          {%- if current_filter_size > 0 -%}
              ({{ current_filter_size }})
          {%- endif -%}
      </button>
    </div>

    <div class="collection-filter__item collection-filter__item--count small--hide">
      {%- if enable_collection_count -%}
        {{ count_label | t: count: count }}
      {%- endif -%}
    </div>

    <div class="collection-filter__item collection-filter__item--sort">
        <div class="collection-filter__sort-container">
        {%- assign sort_by = sort_by | default: default_sort_by -%}
        <label for="SortBy" class="hidden-label">{{ 'collections.sorting.title' | t }}</label>
        <select name="SortBy" id="SortBy" data-default-sortby="{{ default_sort_by }}">
          <option value="title-ascending"{% if sort_by == default_sort_by %} selected="selected"{% endif %}>{{ 'collections.sorting.title' | t }}</option>
          {%- for option in sort_options -%}
          <option value="{{ option.value }}"{% if option.value == sort_by %} selected="selected"{% endif %}>{{ option.name }}</option>
          {%- endfor -%}
        </select>
        </div>
    </div>
  </div>

  <div class="grid grid--uniform{% if mobile_flush_grid %} small--grid--flush{% endif %}"{% unless enable_collection_count %} data-scroll-to{% endunless %}>
    {%- for item in items -%}
      {%- if item.object_type == 'product' -%}
        {%- render 'product-grid-item',
          product: item,
          per_row: per_row,
          quick_shop_enable: quick_shop_enable
        -%}
      {%- else -%}
        {%- render 'search-grid-item',
          item: item,
          per_row: per_row
        %}
      {%- endif -%}
    {%- endfor -%}
  </div>
</div>

<script>
  // collection key values below
  // woo_importer_product-hardiness_zone_rating-zone-4

  const useHardinessZone = async (zip) => {
      const storedData = sessionStorage.getItem("hardinessZoneData");

      if (storedData) {
          const parsedData = JSON.parse(storedData);
          const now = new Date();
          
          // Check if data is still valid and matches the input ZIP
          if (new Date(parsedData.expire_date) > now && parsedData.zip_code === zip) {
              console.log("Using cached hardiness zone data:", parsedData);
              return parsedData;
          }
      }

      // If no valid stored data, fetch new data
      const apiUrl = `https://phzmapi.org/${zip}.json`;

      try {
          const res = await fetch(apiUrl);
          if (!res.ok) throw new Error(`API error: ${res.status}`);

          const data = await res.json();
          const zone = data.zone;

          // If the fetched data is the same as stored data, return early
          if (storedData && JSON.stringify(JSON.parse(storedData)) === JSON.stringify({ 
              expire_date: JSON.parse(storedData).expire_date,
              zip_code: zip,
              hardiness_zone: zone
          })) {
              console.log("Stored data is identical to fetched data. Returning early.");
              return JSON.parse(storedData);
          }

          // Set 24hr expiration time
          const expireDate = new Date();
          expireDate.setHours(expireDate.getHours() + 24);

          // Store new data in sessionStorage
          const storageData = {
              expire_date: expireDate.toISOString(),
              zip_code: zip,
              hardiness_zone: zone
          };

          sessionStorage.setItem("hardinessZoneData", JSON.stringify(storageData));

          console.log("Fetched new hardiness zone data:", storageData);
          return storageData;

      } catch (error) {
          console.error("Error fetching hardiness zone:", error);
          return null;
      }
  };

  useHardinessZone("30316").then(data => console.log(data)).catch(err => console.log("ERROR: ", err));


  const applyHardinessFilter = (filterKey) => {
    const url = new URL(window.location.href);
    
    // Extract the pathname (before the "?")
    let path = url.pathname;
    
    // Check if the key already exists in the pathname
    if (!path.includes(filterKey)) {
        // Append filterKey ensuring it's separated by "+"
        path = path.endsWith("/") ? path + `woo_importer_product-hardiness_zone_rating-zone-${filterKey}` : path + "+" + `woo_importer_product-hardiness_zone_rating-zone-${filterKey}`;
    }

    // Update the URL without modifying existing query parameters
    url.pathname = path;

    window.location.href = url.toString();
  }

  // Example usage: Filter products by color "Red"
  // applyHardinessFilter("5");
</script>

{% comment %} 
  <!-- This is the original theme code for the 'if' statement below - changed for the Power Tools Filter Menu -->
  if enable_sidebar and filter_style != 'drawer' and collection.filters.size > 0 
{% endcomment %}
{%- if enable_sidebar and filter_style != 'drawer' -%}

{% comment %}
  Sidebar enabled but not in drawer mode, only show filter button on mobile
{% endcomment %}
{% style %}
@media screen and (min-width: 769px) {
  .collection-filter__item--drawer {
    display: none;
  }
  .collection-filter__item--count {
    text-align: left;
  }
  html[dir="rtl"] .collection-filter__item--count {
    text-align: right;
  }
}
{% endstyle %}
{%- endif -%}

{% comment %} 
  <!-- This is the original theme code for the 'if' statement below - changed for the Power Tools Filter Menu -->
  if enable_sidebar == false or collection.filters.size == 0 
{% endcomment %}
{%- if enable_sidebar == false -%}

{% comment %}
    Disable sidebar & filter features
{% endcomment %}
{% style %}
.collection-filter__item--drawer {
  display: none;
}
.collection-filter__item--count {
  text-align: left;
}
html[dir="rtl"] .collection-filter__item--count {
  text-align: right;
}
{% endstyle %}
{%- endif -%}

{%- unless enable_sort -%}
{% style %}
.collection-filter__sort-container {
  display: none;
}
{% endstyle %}
{%- endunless -%}